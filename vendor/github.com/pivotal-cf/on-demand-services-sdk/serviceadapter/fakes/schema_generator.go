// Code generated by counterfeiter. DO NOT EDIT.
package fakes

import (
	"sync"

	"github.com/pivotal-cf/on-demand-services-sdk/serviceadapter"
)

type FakeSchemaGenerator struct {
	GeneratePlanSchemaStub        func(plan serviceadapter.Plan) (serviceadapter.PlanSchema, error)
	generatePlanSchemaMutex       sync.RWMutex
	generatePlanSchemaArgsForCall []struct {
		plan serviceadapter.Plan
	}
	generatePlanSchemaReturns struct {
		result1 serviceadapter.PlanSchema
		result2 error
	}
	generatePlanSchemaReturnsOnCall map[int]struct {
		result1 serviceadapter.PlanSchema
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeSchemaGenerator) GeneratePlanSchema(plan serviceadapter.Plan) (serviceadapter.PlanSchema, error) {
	fake.generatePlanSchemaMutex.Lock()
	ret, specificReturn := fake.generatePlanSchemaReturnsOnCall[len(fake.generatePlanSchemaArgsForCall)]
	fake.generatePlanSchemaArgsForCall = append(fake.generatePlanSchemaArgsForCall, struct {
		plan serviceadapter.Plan
	}{plan})
	fake.recordInvocation("GeneratePlanSchema", []interface{}{plan})
	fake.generatePlanSchemaMutex.Unlock()
	if fake.GeneratePlanSchemaStub != nil {
		return fake.GeneratePlanSchemaStub(plan)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.generatePlanSchemaReturns.result1, fake.generatePlanSchemaReturns.result2
}

func (fake *FakeSchemaGenerator) GeneratePlanSchemaCallCount() int {
	fake.generatePlanSchemaMutex.RLock()
	defer fake.generatePlanSchemaMutex.RUnlock()
	return len(fake.generatePlanSchemaArgsForCall)
}

func (fake *FakeSchemaGenerator) GeneratePlanSchemaArgsForCall(i int) serviceadapter.Plan {
	fake.generatePlanSchemaMutex.RLock()
	defer fake.generatePlanSchemaMutex.RUnlock()
	return fake.generatePlanSchemaArgsForCall[i].plan
}

func (fake *FakeSchemaGenerator) GeneratePlanSchemaReturns(result1 serviceadapter.PlanSchema, result2 error) {
	fake.GeneratePlanSchemaStub = nil
	fake.generatePlanSchemaReturns = struct {
		result1 serviceadapter.PlanSchema
		result2 error
	}{result1, result2}
}

func (fake *FakeSchemaGenerator) GeneratePlanSchemaReturnsOnCall(i int, result1 serviceadapter.PlanSchema, result2 error) {
	fake.GeneratePlanSchemaStub = nil
	if fake.generatePlanSchemaReturnsOnCall == nil {
		fake.generatePlanSchemaReturnsOnCall = make(map[int]struct {
			result1 serviceadapter.PlanSchema
			result2 error
		})
	}
	fake.generatePlanSchemaReturnsOnCall[i] = struct {
		result1 serviceadapter.PlanSchema
		result2 error
	}{result1, result2}
}

func (fake *FakeSchemaGenerator) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.generatePlanSchemaMutex.RLock()
	defer fake.generatePlanSchemaMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeSchemaGenerator) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ serviceadapter.SchemaGenerator = new(FakeSchemaGenerator)
