// Code generated by counterfeiter. DO NOT EDIT.
package fakes

import (
	"sync"

	"github.com/pivotal-cf/on-demand-services-sdk/bosh"
	"github.com/pivotal-cf/on-demand-services-sdk/serviceadapter"
)

type FakeBinder struct {
	CreateBindingStub        func(bindingID string, deploymentTopology bosh.BoshVMs, manifest bosh.BoshManifest, requestParams serviceadapter.RequestParameters) (serviceadapter.Binding, error)
	createBindingMutex       sync.RWMutex
	createBindingArgsForCall []struct {
		bindingID          string
		deploymentTopology bosh.BoshVMs
		manifest           bosh.BoshManifest
		requestParams      serviceadapter.RequestParameters
	}
	createBindingReturns struct {
		result1 serviceadapter.Binding
		result2 error
	}
	createBindingReturnsOnCall map[int]struct {
		result1 serviceadapter.Binding
		result2 error
	}
	DeleteBindingStub        func(bindingID string, deploymentTopology bosh.BoshVMs, manifest bosh.BoshManifest, requestParams serviceadapter.RequestParameters) error
	deleteBindingMutex       sync.RWMutex
	deleteBindingArgsForCall []struct {
		bindingID          string
		deploymentTopology bosh.BoshVMs
		manifest           bosh.BoshManifest
		requestParams      serviceadapter.RequestParameters
	}
	deleteBindingReturns struct {
		result1 error
	}
	deleteBindingReturnsOnCall map[int]struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeBinder) CreateBinding(bindingID string, deploymentTopology bosh.BoshVMs, manifest bosh.BoshManifest, requestParams serviceadapter.RequestParameters) (serviceadapter.Binding, error) {
	fake.createBindingMutex.Lock()
	ret, specificReturn := fake.createBindingReturnsOnCall[len(fake.createBindingArgsForCall)]
	fake.createBindingArgsForCall = append(fake.createBindingArgsForCall, struct {
		bindingID          string
		deploymentTopology bosh.BoshVMs
		manifest           bosh.BoshManifest
		requestParams      serviceadapter.RequestParameters
	}{bindingID, deploymentTopology, manifest, requestParams})
	fake.recordInvocation("CreateBinding", []interface{}{bindingID, deploymentTopology, manifest, requestParams})
	fake.createBindingMutex.Unlock()
	if fake.CreateBindingStub != nil {
		return fake.CreateBindingStub(bindingID, deploymentTopology, manifest, requestParams)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.createBindingReturns.result1, fake.createBindingReturns.result2
}

func (fake *FakeBinder) CreateBindingCallCount() int {
	fake.createBindingMutex.RLock()
	defer fake.createBindingMutex.RUnlock()
	return len(fake.createBindingArgsForCall)
}

func (fake *FakeBinder) CreateBindingArgsForCall(i int) (string, bosh.BoshVMs, bosh.BoshManifest, serviceadapter.RequestParameters) {
	fake.createBindingMutex.RLock()
	defer fake.createBindingMutex.RUnlock()
	return fake.createBindingArgsForCall[i].bindingID, fake.createBindingArgsForCall[i].deploymentTopology, fake.createBindingArgsForCall[i].manifest, fake.createBindingArgsForCall[i].requestParams
}

func (fake *FakeBinder) CreateBindingReturns(result1 serviceadapter.Binding, result2 error) {
	fake.CreateBindingStub = nil
	fake.createBindingReturns = struct {
		result1 serviceadapter.Binding
		result2 error
	}{result1, result2}
}

func (fake *FakeBinder) CreateBindingReturnsOnCall(i int, result1 serviceadapter.Binding, result2 error) {
	fake.CreateBindingStub = nil
	if fake.createBindingReturnsOnCall == nil {
		fake.createBindingReturnsOnCall = make(map[int]struct {
			result1 serviceadapter.Binding
			result2 error
		})
	}
	fake.createBindingReturnsOnCall[i] = struct {
		result1 serviceadapter.Binding
		result2 error
	}{result1, result2}
}

func (fake *FakeBinder) DeleteBinding(bindingID string, deploymentTopology bosh.BoshVMs, manifest bosh.BoshManifest, requestParams serviceadapter.RequestParameters) error {
	fake.deleteBindingMutex.Lock()
	ret, specificReturn := fake.deleteBindingReturnsOnCall[len(fake.deleteBindingArgsForCall)]
	fake.deleteBindingArgsForCall = append(fake.deleteBindingArgsForCall, struct {
		bindingID          string
		deploymentTopology bosh.BoshVMs
		manifest           bosh.BoshManifest
		requestParams      serviceadapter.RequestParameters
	}{bindingID, deploymentTopology, manifest, requestParams})
	fake.recordInvocation("DeleteBinding", []interface{}{bindingID, deploymentTopology, manifest, requestParams})
	fake.deleteBindingMutex.Unlock()
	if fake.DeleteBindingStub != nil {
		return fake.DeleteBindingStub(bindingID, deploymentTopology, manifest, requestParams)
	}
	if specificReturn {
		return ret.result1
	}
	return fake.deleteBindingReturns.result1
}

func (fake *FakeBinder) DeleteBindingCallCount() int {
	fake.deleteBindingMutex.RLock()
	defer fake.deleteBindingMutex.RUnlock()
	return len(fake.deleteBindingArgsForCall)
}

func (fake *FakeBinder) DeleteBindingArgsForCall(i int) (string, bosh.BoshVMs, bosh.BoshManifest, serviceadapter.RequestParameters) {
	fake.deleteBindingMutex.RLock()
	defer fake.deleteBindingMutex.RUnlock()
	return fake.deleteBindingArgsForCall[i].bindingID, fake.deleteBindingArgsForCall[i].deploymentTopology, fake.deleteBindingArgsForCall[i].manifest, fake.deleteBindingArgsForCall[i].requestParams
}

func (fake *FakeBinder) DeleteBindingReturns(result1 error) {
	fake.DeleteBindingStub = nil
	fake.deleteBindingReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeBinder) DeleteBindingReturnsOnCall(i int, result1 error) {
	fake.DeleteBindingStub = nil
	if fake.deleteBindingReturnsOnCall == nil {
		fake.deleteBindingReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.deleteBindingReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeBinder) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.createBindingMutex.RLock()
	defer fake.createBindingMutex.RUnlock()
	fake.deleteBindingMutex.RLock()
	defer fake.deleteBindingMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeBinder) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ serviceadapter.Binder = new(FakeBinder)
